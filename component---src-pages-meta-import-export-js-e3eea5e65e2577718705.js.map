{"version":3,"file":"component---src-pages-meta-import-export-js-e3eea5e65e2577718705.js","mappings":"uOAKe,SAASA,IACpB,IAAIC,EAAgB,CAAC,EAEfC,EAAiC,oBAAXC,QAA0BA,OA+DtD,OACI,QAAC,IAAM,CAACC,MAAM,kBACV,QAAC,IAAG,CAACA,MAAM,mBACX,eAAKC,MAAM,4BACP,2BAAY,iBAAG,wEAAoE,iBAAG,eAAgB,+IAA0I,mBAAK,8FACrP,kBAAI,qBACJ,iBAAOC,IAAI,UAAS,2DAA8D,oBAClF,kBAAQC,GAAG,SAASC,QA5BhC,WAEI,IAAMC,EAAoBP,EAAeA,EAAaQ,aAAaC,QAAQ,aAAe,KACpFC,EAAiBC,KAAKC,MAAML,GAG5BM,EAAiBb,EAAeA,EAAaQ,aAAaC,QAAQ,UAAY,KAC9EK,EAAcH,KAAKC,MAAMC,GAGzBE,EAAqBf,EAAeA,EAAaQ,aAAaC,QAAQ,cAAgB,KACtFO,EAAkBL,KAAKC,MAAMG,GAEnChB,EAAyB,UAAIW,EAC7BX,EAAsB,OAAIe,EAC1Bf,EAA0B,WAAIiB,EAE9B,IAzDcC,EAASC,EAAUC,EAC7BC,EACAC,EAuDAC,EAAWZ,EAAqB,KAAEa,QAAQ,cAAe,KAAKC,cAzDpDP,EA0DLN,KAAKc,UAAU1B,GA1DDmB,EA0DiBI,EA1DPH,EA0DiB,mBAzD9CC,EAAIM,SAASC,cAAc,KAC3BN,EAAO,IAAIO,KAAK,CAACX,GAAU,CAACY,KAAMV,IACtCC,EAAEU,KAAOC,IAAIC,gBAAgBX,GAC7BD,EAAEa,SAAWf,EACbE,EAAEc,OAsDN,GAS0D,SAC9C,2BAAY,iBAAG,+DAA2D,iBAAG,aAAa,iBAC1F,oBACA,kBAAI,qBACJ,iBAAO9B,IAAI,UAAS,qDAAwD,oBAC5E,iBAAOyB,KAAK,OAAOxB,GAAG,SAAS8B,OAAO,QAAQC,SAlE1D,SAAyBC,GACrB,IAAIhB,EAAOgB,EAAEC,OAAOC,MAAM,GAC1B,GAAKlB,EAAL,CAGA,IAAImB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASL,IAO7B,SAA2BM,GACvB,IAAIC,EAAsB,CAAC,EAC3B,IACIA,EAAsBjC,KAAKC,MAAM+B,EAIrC,CAHE,MAAON,GAEL,YADAQ,MAAM,kCAAmCR,EAE7C,CACA,IAAMS,EAAuBF,EAA+B,UACtDG,EAAwBH,EAA4B,OACpDI,EAA4BJ,EAAgC,WAE7D5C,IACDA,EAAaQ,aAAayC,QAAQ,YAAatC,KAAKc,UAAUqB,IAC9D9C,EAAaQ,aAAayC,QAAQ,SAAUtC,KAAKc,UAAUsB,IAC3D/C,EAAaQ,aAAayC,QAAQ,aAActC,KAAKc,UAAUuB,IAGvE,CAvBQE,CADeb,EAAEC,OAAOa,OAE5B,EACAX,EAAOY,WAAW/B,EANlB,CAOJ,KAwDY,oBACA,oBACA,oBACA,oBACA,oBACA,2BAAY,iBAAG,kBAAc,iBAAG,oBAAoB,4FAAwF,iBAAG,gBAAgB,+BAA2B,iBAAG,eAAgB,yEAAoE,mBAAK,4HAItS,C","sources":["webpack://gatsby-starter-rocketdocs/./src/pages/meta/import-export.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport Layout from '@rocketseat/gatsby-theme-docs/src/components/Layout';\r\nimport Seo from '@rocketseat/gatsby-theme-docs/src/components/SEO';\r\n\r\nexport default function importExport() {\r\n    var characterData = {};\r\n\r\n    const windowGlobal = typeof window !== 'undefined' && window\r\n\r\n    function download(content, fileName, contentType) {\r\n        var a = document.createElement(\"a\");\r\n        var file = new Blob([content], {type: contentType});\r\n        a.href = URL.createObjectURL(file);\r\n        a.download = fileName;\r\n        a.click();\r\n    }\r\n    function importCharacter(e) {\r\n        var file = e.target.files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        var reader = new FileReader();\r\n        reader.onload = function(e) {\r\n            var contents = e.target.result;\r\n            saveCharacterData(contents);\r\n        };\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    function saveCharacterData(characterDataStr) {\r\n        var loadedCharacterData = {}\r\n        try {\r\n            loadedCharacterData = JSON.parse(characterDataStr);\r\n        } catch (e) {\r\n            alert(\"Error while loading JSON file: \"+ e);\r\n            return;\r\n        }\r\n        const loadedCharacterStats = loadedCharacterData['character'];\r\n        const loadedCharacterTraits = loadedCharacterData['traits'];\r\n        const loadedCharacterChallenges = loadedCharacterData['challenges'];\r\n\r\n        if ( windowGlobal ) {\r\n            windowGlobal.localStorage.setItem(\"character\", JSON.stringify(loadedCharacterStats));\r\n            windowGlobal.localStorage.setItem(\"traits\", JSON.stringify(loadedCharacterTraits));\r\n            windowGlobal.localStorage.setItem(\"challenges\", JSON.stringify(loadedCharacterChallenges));\r\n        }\r\n\r\n    }\r\n\r\n    function exportCharacter() {\r\n        // character stats\r\n        const savedCharacterStr = windowGlobal ? windowGlobal.localStorage.getItem(\"character\") : \"{}\"\r\n        const savedCharacter = JSON.parse(savedCharacterStr)\r\n        \r\n        // character traits\r\n        const savedTraitsStr = windowGlobal ? windowGlobal.localStorage.getItem(\"traits\") : \"{}\"\r\n        const savedTraits = JSON.parse(savedTraitsStr)\r\n\r\n        // challenges\r\n        const savedChallengesStr = windowGlobal ? windowGlobal.localStorage.getItem(\"challenges\") : \"{}\"\r\n        const savedChallenges = JSON.parse(savedChallengesStr)\r\n\r\n        characterData['character'] = savedCharacter;\r\n        characterData['traits'] = savedTraits;\r\n        characterData['challenges'] = savedChallenges;\r\n\r\n        var filename = savedCharacter['name'].replace(/[^a-z0-9]/gi, '_').toLowerCase();\r\n        download(JSON.stringify(characterData), filename, 'application/json');\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"IMPORT/EXPORT\">\r\n            <Seo title=\"Import/Export\" />\r\n            <div class=\"import-export-container\">\r\n                <blockquote><p>This section allows you to import or export your character data for <i>safe backup</i>, or to \"move\" your game-state to another device (if, for example, you started playing in your smartphone and want to continue in your PC).<br/> You will need to copy the exported file to the new device and import it there manually.</p></blockquote>\r\n                <h2>EXPORT CHARACTER</h2>\r\n                <label for=\"export\">Save current Character and game-state to a local file:</label><br/>\r\n                <button id=\"export\" onClick={exportCharacter}>Save</button>\r\n                <blockquote><p>The data is saved locally as a JSON file into your default <i>Downloads</i> directory.</p></blockquote>\r\n                <br/>\r\n                <h2>IMPORT CHARACTER</h2>\r\n                <label for=\"import\">Load Character and game-state from a local file:</label><br/>\r\n                <input type=\"file\" id=\"import\" accept=\".json\" onChange={importCharacter}/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <hr/>\r\n                <br/>\r\n                <blockquote><p>Note that the <b>cy.br/dys.top.ia</b> web app already saves your character stats, traits and challenges using your browser's <i>localStorage</i>. Since this is similar to <i>web cookies</i>, it will get erased if you clear the cache, uninstall the app, etc. <br/>For that reason, it is recommended that you use this IMPORT/EXPORT functionality often to backup your progress safely.</p></blockquote>\r\n            </div>\r\n        </Layout>\r\n    );\r\n}"],"names":["importExport","characterData","windowGlobal","window","title","class","for","id","onClick","savedCharacterStr","localStorage","getItem","savedCharacter","JSON","parse","savedTraitsStr","savedTraits","savedChallengesStr","savedChallenges","content","fileName","contentType","a","file","filename","replace","toLowerCase","stringify","document","createElement","Blob","type","href","URL","createObjectURL","download","click","accept","onChange","e","target","files","reader","FileReader","onload","characterDataStr","loadedCharacterData","alert","loadedCharacterStats","loadedCharacterTraits","loadedCharacterChallenges","setItem","saveCharacterData","result","readAsText"],"sourceRoot":""}